name: CI/CD

on:
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create .env file
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$SECRETS_CONTEXT" > Docker/Keys/.env
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
      - name: Login Docker and save token
        id: docker_login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Save Docker token
        uses: actions/upload-artifact@v4.3.0
        with:
          name: docker-token
          path: ~/.docker/config.json
  build_and_push_server:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Docker token
        uses: actions/download-artifact@v4.1.1
        with:
          name: docker-token
          path: ~/.docker/
      - name: Build and push server image
        run: |
          docker buildx build -t ${{secrets.DOCKER_REPO}}/server:latest Docker/server
          docker push ${{secrets.DOCKER_REPO}}/server:latest
  build_and_push_api_gateway:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Docker token
        uses: actions/download-artifact@v4.1.1
        with:
          name: docker-token
          path: ~/.docker/
      - name: Build and push api_gateway image
        run: |
          docker buildx build -t ${{secrets.DOCKER_REPO}}/api_gateway:latest Docker/api_gateway
          docker push ${{secrets.DOCKER_REPO}}/api_gateway:latest
  build_and_push_mysql:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker token
        uses: actions/download-artifact@v4.1.1
        with:
          name: docker-token
          path: ~/.docker/
      - name: Build and push mysql image
        run: |
          docker pull mysql:8
          docker tag mysql:8 ${{secrets.DOCKER_REPO}}/mysql:8
          docker push ${{secrets.DOCKER_REPO}}/mysql:8
  build_and_push_nginx:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker token
        uses: actions/download-artifact@v4.1.1
        with:
          name: docker-token
          path: ~/.docker/
      - name: Build and push nginx image
        run: |
          docker buildx build -t ${{secrets.DOCKER_REPO}}/nginx:1.25 Docker/nginx
          docker push ${{secrets.DOCKER_REPO}}/nginx:1.25

  Deploy_to_server:
    needs:
      [
        build_and_push_server,
        build_and_push_api_gateway,
        build_and_push_mysql,
        build_and_push_nginx,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{secrets.AWS_HOST}}
          username: ${{secrets.AWS_USERNAME}}
          key: ${{secrets.AWS_KEY}}
          port: ${{secrets.AWS_PORT}}
          script: |
            sudo rm -rf pposonggil_v2
            git clone https://github.com/Gonagi/pposonggil_v2.git
            cd pposonggil_v2
            sudo find . -type f -exec sed -i 's/localhost/gonagi.store/g' {} + 
            cd Docker/Keys
            echo "${{secrets.GONAGI_STORE_PEM}}" >> gonagi.store.pem
            echo "${{secrets.GONAGI_STORE_KEY_PEM}}" >> gonagi.store-key.pem
            echo "MYSQL_HOST=${{secrets.MYSQL_HOST}}" >> .env
            echo "MYSQL_USER=${{secrets.MYSQL_USER}}" >> .env
            echo "MYSQL_DATABASE=${{secrets.MYSQL_DATABASE}}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{secrets.MYSQL_ROOT_PASSWORD}}" >>.env
            echo "MYSQL_PASSWORD=${{secrets.MYSQL_PASSWORD}}" >> .env
            echo "PUBLIC_KEY=${{secrets.PUBLIC_KEY}}" >> .env
            echo "ODSAY_KEY=${{secrets.ODSAY_KEY}}" >>.env
            echo "KAKAO_JAVASCRIPT_KEY=${{secrets.KAKAO_JAVASCRIPT_KEY}}" >> .env
            echo "KAKAO_REST_KEY=${{secrets.KAKAO_REST_KEY}}" >> .env
            echo "SESSION_KEY=${{secrets.SESSION_KEY}}" >>.env
            cd ../server
            sudo npm install
            cd ../api_gateway
            sudo npm install            
            sudo docker-compose up -d
