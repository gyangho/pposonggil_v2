version: "3.2"
services:
  nginx:
    image: nginx:latest
    container_name: nginx
    build: ./Backend/nginx
    ports:
      - 80:80
      - 443:443
      - 3000:3000
      - 8080:8080
    volumes:
      - type: bind
        source: ./Backend/Keys
        target: /etc/Keys
      - type: bind
        source: ./Backend/nginx/conf.d/api_gateway.conf
        target: /etc/nginx/conf.d/api_gateway.conf
      - type: bind
        source: ./Backend/nginx/nginx.conf
        target: /etc/nginx/nginx.conf
    networks:
      - front-network
    environment:
      - TZ=Asia/Seoul
    depends_on:
      - server
      - api_gateway
      - pposonggil
      - pposonggil-react
      - mysql

  server:
    image: gonaging/server:latest
    depends_on:
      - mysql
    expose:
      - 8888
    build: ./Backend/server
    container_name: server
    restart: unless-stopped
    stdin_open: true # `-i`
    tty: true # `-t`
    environment:
      - TZ=Asia/Seoul
    networks:
      - front-network
      - back-network
    volumes:
      - type: bind
        source: ./Backend/server
        target: /usr/src/app/server
      - type: bind
        source: ./Backend/Keys
        target: /usr/src/app/server/Keys

  api_gateway:
    image: gonaging/api_gateway:latest
    depends_on:
      - mysql
    expose:
      - 8889
    build: ./Backend/api_gateway
    container_name: api_gateway
    restart: unless-stopped
    stdin_open: true # `-i`
    tty: true # `-t`
    environment:
      - TZ=Asia/Seoul
    networks:
      - front-network
      - back-network
    volumes:
      - type: bind
        source: ./Backend/api_gateway
        target: /usr/src/app/api_gateway
      - type: bind
        source: ./Backend/Keys
        target: /usr/src/app/api_gateway/Keys

  pposonggil-react:
    image: gonaging/pposonggil-react:latest
    depends_on:
      - mysql
    expose:
      - 3000
    build: ./Frontend/pposonggil-react
    container_name: pposonggil-react
    restart: unless-stopped
    stdin_open: true # `-i`
    tty: true # `-t`
    environment:
      - TZ=Asia/Seoul
    networks:
      - front-network
      - back-network
    volumes:
      - type: bind
        source: ./Frontend/pposonggil-react
        target: /usr/src/app/pposonggil-react

  pposonggil:
    build:
      context: ./Backend/pposonggil
      dockerfile: Dockerfile.dev
    container_name: pposonggil
    volumes:
      - type: bind
        source: ./Backend/pposonggil
        target: /usr/src/pposonggil
    expose:
      - 8080
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/Tables_in_nodejs 
      - SPRING_DATASOURCE_USERNAME=pposong
      - SPRING_DATASOURCE_PASSWORD=000000
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - front-network
      - back-network
      - osrm-network

  mysql:
    image: gonaging/mysql:8
    restart: unless-stopped
    env_file:
      - ./Backend/Keys/.env
    container_name: mysqlDB
    expose:
      - 3306
    environment:
      - TZ=Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - type: volume
        source: db
        target: /var/lib/mysql
      - type: bind
        source: ./Backend/mysql
        target: /docker-entrypoint-initdb.d
    networks:
      - back-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD",
        ]
      interval: 5s
      timeout: 2s
      retries: 100

  osrm-extract:
    image: osrm/osrm-backend
    container_name: osrm-extract
    command: osrm-extract -p /opt/foot_pposong.lua /data/seoul.osm
    volumes:
#      - "${PWD}/Docker/osrm/data:/data"
      - type: bind
        source: ./Backend/osrm/data
        target: /data
#      - "${PWD}/Docker/osrm/profiles/foot_pposong.lua:/opt/foot_pposong.lua"
      - type: bind
        source: ./Backend/osrm/profiles/foot_pposong.lua
        target: /opt/foot_pposong.lua
    #
    networks:
      - osrm-network

  osrm-partition:
    image: osrm/osrm-backend
    container_name: osrm-partition
    command: osrm-partition /data/seoul.osrm
    volumes:
      #- "${PWD}/Docker/osrm/data:/data"
      - type: bind
        source: ./Backend/osrm/data
        target: /data
    depends_on:
      osrm-extract:
        condition: service_completed_successfully
    networks:
      - osrm-network

  osrm-customize:
    image: osrm/osrm-backend
    container_name: osrm-customize
    command: osrm-customize /data/seoul.osrm
    volumes:
      #- "${PWD}/Docker/osrm/data:/data"
      - type: bind
        source: ./Backend/osrm/data
        target: /data
    depends_on:
      osrm-partition:
        condition: service_completed_successfully
    networks:
      - osrm-network

  osrm-routed:
    image: osrm/osrm-backend
    container_name: osrm-routed
    command: osrm-routed --algorithm mld /data/seoul.osm
    expose:
      - 5000
    volumes:
      #- "${PWD}/Docker/osrm/data:/data"
      - type: bind
        source: ./Backend/osrm/data
        target: /data
    depends_on:
      osrm-customize:
            condition: service_completed_successfully
    networks:
      - osrm-network

volumes:
  db:
networks:
  front-network:
    driver: bridge
  back-network:
    driver: bridge
  osrm-network:
    driver: bridge

x-project_name: pposonggil_v2
